query_expr: [query_expr set_op] select [ "ORDER"i "BY"i order_by_expr ] [ "LIMIT"i count [ "OFFSET"i skip_rows ] ]

?select: "SELECT"i [( "ALL"i | "DISTINCT"i )] (select_expr ",")* select_expr [ "FROM"i from_expr ] [ "WHERE"i bool_expression ] [ "GROUP"i "BY"i groupby_expr
        | "ROLLUP"i rollup_expr ] [ "HAVING"i bool_expression ] [ "WINDOW"i window_expr ]

select_expr: expression [ [ "AS"i ] alias ]

?from_expr: [from_expr ","] from_item  -> from_expression

order_by_expr: [order_by_expr ","] expression [( "ASC"i | "DESC"i )]  -> sort_data

replace_expr: [replace_expr ","] expression [ "AS"i ] NAME

groupby_expr: [groupby_expr ","] expression -> group_by

rollup_expr: [rollup_expr ","] expression  -> roll_up

window_expr: [window_expr ","] _window_name "AS"i ( window_definition )

set_op: "UNION"i ( "ALL"i | "DISTINCT"i ) | "INTERSECT"i "DISTINCT"i | "EXCEPT"i "DISTINCT"i

from_item: NAME [ [ "AS"i ] alias ] [ "FOR"i "SYSTEM_TIME"i "AS"i "OF"i timestamp_expression ] -> table
            | join
            | ( left_paren query_expr right_paren ) [ [ "AS"i ] alias ] -> subquery
            | with_query_name [ [ "AS"i ] alias ]

join: from_item [ _join_type ] "JOIN"i from_item [ "ON"i bool_expression ] -> merge_function

_join_type: ( "INNER"i | "CROSS"i | "FULL"i ["OUTER"i] | "LEFT"i ["OUTER"i] | "RIGHT"i ["OUTER"i] )

expression: STAR
            | [NAME period] NAME -> column_name
            | literal
            | function left_paren expression right_paren -> sql_function
            | "CAST"i left_paren expression "AS"i typename right_paren -> as_type

math: integer "-" integer -> sub
    | integer "+" integer -> add
    | integer "*" integer -> mul
    | integer "/" integer -> div

period: "."
left_paren: "("
right_paren: ")"
typename: "int" | "varchar"
function: NAME
alias: NAME -> alias_string
_window_name: NAME
count: integer
skip_rows: integer
bool_expression: [bool_expression ("AND"i | "OR"i)] (equals | not_equals)
equals: expression "=" expression
not_equals: expression ("<>" | "!=") expression
literal: boolean -> bool
       | number_expr -> number
boolean: "true"i -> true
       | "false"i -> false
?number_expr: product
            | number_expr "+" product -> add
            | number_expr "-" product -> sub

?product: NUMBER
        | product "*" NUMBER -> mul
        | product "/" NUMBER -> div
integer: /[1-9][0-9]*/
STAR: "*"
window_definition:
with_query_name:
timestamp_expression:
array_expression:
array_path:

%import common.CNAME -> NAME
%import common.NUMBER
%import common.WS
%ignore WS
